:plugin: elastic_integration
:type: filter

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

:elastic-integration-name: Elastic Integration

[id="plugins-{type}s-{plugin}"]

=== {elastic-integration-name} filter plugin

include::{include_path}/plugin_header.asciidoc[]

.Elastic Enterprise License
****
Use of this plugin requires an active Enterprise Elastic License.
****

==== Description

Using this filter you can process Elastic integrations powered by Elasticsearch Ingest Node in Logstash.

Once configured to point to an Elasticsearch cluster, events processed by this filter will first resolve their effective data-stream, and determine from elasticsearch which ingest pipeline to run.
The ingest pipeline will be run inside Logstash without transmitting the event to Elasticsearch.

Events that are successfully handled by their ingest pipeline will have `[@metadata][target_ingest_pipeline]` set to `+_none+` so that any downstream Elasticsearch output in the Logstash pipeline will avoid running the event's default pipeline _again_ in Elasticsearch.

NOTE: Some multi-pipeline configurations such as logstash-to-logstash over http(s) do not maintain the state of `[@metadata]` fields.
      In these setups, you may need to explicitly configure your downstream pipeline's Elasticsearch output with `pipeline => "_none"` to avoid re-running the default pipeline.

Events that _fail_ ingest pipeline processing will be tagged with `_ingest_pipeline_failure`, and their `[@metadata][_ingest_pipeline_failure]` will be populated with details as a key/value map.

.Technology Preview
****
This {elastic-integration-name} filter plugin is part of a _Technology Preview_, which means that both configuration options and implementation details are subject to change in minor releases without being preceded by deprecation warnings.

Before upgrading this plugin or Logstash itself, please pay special attention to the changelogs to avoid being caught by surprise.
****

[id="plugins-{type}s-{plugin}-security"]
==== Security

SSL is enabled by default in the plugin.

===== SSL Identity Configuration

This plugin can optionally be configured to present a certificate-based proof-of-identity to the Elasticsearch cluster it connects to:

* A PKCS8 Certificate/Key pair (see <<plugins-{type}s-{plugin}-ssl_certificate>>)
* A JKS- or PKCS12-formatted Keystore (see <<plugins-{type}s-{plugin}-ssl_keystore_path>>)

===== SSL Trust Configuration

When communicating over SSL, this plugin fully-validates the proof-of-identity presented by Elasticsearch using the system trust store. An alternate source of trust can be provided with one of:

* A PEM-formatted list of certificate authorities (see <<plugins-{type}s-{plugin}-ssl_certificate_authorities>>)
* A JKS- or PKCS12-formatted Keystore(see <<plugins-{type}s-{plugin}-ssl_truststore_path>>)

===== Request Identity

You can configure this plugin to present authentication credentials to Elasticsearch in one of several ways:

* ApiKey: (see <<plugins-{type}s-{plugin}-api_key>>)
* Cloud Auth: (see <<plugins-{type}s-{plugin}-cloud_auth>>)
* HTTP Basic Auth: (see <<plugins-{type}s-{plugin}-auth_basic_username>> and <<plugins-{type}s-{plugin}-auth_basic_password>>)

NOTE: Request authentication is not a substitute for SSL, as it provides neither secrecy nor security on its own.
When used with SSL disabled, these auth credentials are transmitted in effectively clear-text and can be easily recovered by an adversary.

[id="plugins-{type}s-{plugin}-supported_ingest_processors"]
==== Supported Ingest Processors

This filter can run Elasticsearch Ingest Node pipelines that are _wholly_ comprised of the supported subset of processors, with access to the Painless and Mustache scripting engines where applicable:

[cols="<1,<1,<4",options="header"]
|=======================================================================
|Source | Processor | Caveats
.34+h|Ingest Common

| `append` | _none_
| `bytes` | _none_
| `communityid` | _none_
| `convert` | _none_
| `csv` | _none_
| `date` | _none_
| `dateindexname` | _none_
| `dissect` | _none_
| `dotexpander` | _none_
| `drop` | _none_
| `fail` | _none_
| `fingerprint` | _none_
| `foreach` | _none_
| `grok` | _none_
| `gsub` | _none_
| `htmlstrip` | _none_
| `join` | _none_
| `json` | _none_
| `keyvalue` | _none_
| `lowercase` | _none_
| `networkdirection` | _none_
| `pipeline` | resolved pipeline _must_ be wholly-composed of supported processors
| `redact` | _none_
| `registereddomain` | _none_
| `remove` | _none_
| `rename` | _none_
| `script` | _none_
| `set` | _none_
| `sort` | _none_
| `split` | _none_
| `trim` | _none_
| `uppercase` | _none_
| `uriparts` | _none_
| `urldecode` | _none_

h| GeoIp
| `geoip` | Requires local MaxMind GeoIp databases <<plugins-{type}s-{plugin}-geoip_database_directory>>

|=======================================================================


[id="plugins-{type}s-{plugin}-field_mappings"]
===== Field Mappings

During execution, the Ingest pipeline works with a temporary mutable _view_ of the Logstash event that re-shapes some {ls}-reserved fields into their expected IngestDocument field names and object-types.
Changes to the IngestDocument will be reflected in the resulting Logstash Event, including safely mapping these reserved fields _back_ from the IngestDocument reserved field to the {ls} reserved field counterpart.

[cols="<,<,<",options="header"]
|=======================================================================

| {ls} Field | IngestDocument Field | Conflict Handling

| `@timestamp` | `_ingest.timestamp` |when ingest processing _also_ sets a top-level `@timestamp` field, it will be made available via the Event's `_@timestamp` field

| `@version` | `_version` | when ingest processing _also_ sets a top-level `@version` field in the source, it will be made available via the Event's `_@version` field

| `@metadata` | `@metadata` | when ingest processing replaces the top-level `@metadata` map with an object that is not a string-object map, it will be made available via the Event's `_@metadata` field.

| `tags` | `tags` | when ingest processing produces a top-level `tags` field that is not a collection of strings, it will be made available via the event's `_tags` field.

| _everything else_ | _in-place, as-structured_ | only minimal type conversions are done
|=======================================================================

[id="plugins-{type}s-{plugin}-options"]
==== {elastic-integration-name} Input Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-api_key>> | <<password,password>>|No
| <<plugins-{type}s-{plugin}-auth_basic_password>> | <<password,password>>|No
| <<plugins-{type}s-{plugin}-auth_basic_username>> | <<string,string>>|No
| <<plugins-{type}s-{plugin}-cloud_auth>> | <<password,password>>|No
| <<plugins-{type}s-{plugin}-cloud_id>> | <<string,string>>|No
| <<plugins-{type}s-{plugin}-hosts>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-ssl_certificate>> | <<path,path>>|No
| <<plugins-{type}s-{plugin}-ssl_certificate_authorities>> |<<array,array>>|No
| <<plugins-{type}s-{plugin}-ssl_enabled>> | <<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-ssl_key>> | <<path,path>>|No
| <<plugins-{type}s-{plugin}-ssl_keystore_password>> | <<password,password>>|No
| <<plugins-{type}s-{plugin}-ssl_keystore_path>> | <<path,path>>|No
| <<plugins-{type}s-{plugin}-ssl_key_passphrase>> | <<password,password>>|No
| <<plugins-{type}s-{plugin}-ssl_truststore_path>> | <<path,path>>|No
| <<plugins-{type}s-{plugin}-ssl_truststore_password>> | <<password,password>>|No
| <<plugins-{type}s-{plugin}-ssl_verification_mode>> | <<string,string>>, one of `["full", "certificate", "none"]`|No
|=======================================================================

[id="plugins-{type}s-{plugin}-api_key"]
===== `api_key`

* Value type is <<password,password>>
* There is no default value for this setting.

The encoded form of an API key that is used to authenticate this plugin to Elasticsearch

[id="plugins-{type}s-{plugin}-auth_basic_password"]
===== `auth_basic_password`

* Value type is <<password,password>>
* There is no default value for this setting.
* Required when request auth is configured with <<plugins-{type}s-{plugin}-auth_basic_username>>

A password when using basic authentication to connect to Elasticsearch.

[id="plugins-{type}s-{plugin}-auth_basic_username"]
===== `auth_basic_username`

* Value type is <<string,string>>
* There is no default value for this setting.
* When present, <<plugins-{type}s-{plugin}-auth_basic_password>> is also required.

A user name when using basic authentication to connect to Elasticsearch.

[id="plugins-{type}s-{plugin}-cloud_auth"]
===== `cloud_auth`

* Value type is <<password,password>>
* There is no default value for this setting.

Cloud authentication string ("<username>:<password>" format) is an alternative
for the `auth_basic_username`/`auth_basic_password` pair and can be obtained from Elastic Cloud web console.

[id="plugins-{type}s-{plugin}-cloud_id"]
===== `cloud_id`

* Value type is <<string,string>>
* There is no default value for this setting.

Cloud ID, from the Elastic Cloud web console.
This setting should not be used when <<plugins-{type}s-{plugin}-hosts>> are specified.
Using this setting enables SSL if <<plugins-{type}s-{plugin}-ssl_enabled>> is not specified or this cannot be used with <<plugins-{type}s-{plugin}-ssl_enabled>> 'false'.

For more details, check out the
{logstash-ref}/connecting-to-cloud.html[Logstash-to-Cloud documentation].

[id="plugins-{type}s-{plugin}-hosts"]
===== `hosts`

* Value type is <<array,array>>
* There is no default value for this setting.

A list of Elasticsearch hosts to connect.

Examples:

    `"127.0.0.1"`
    `["127.0.0.1:9200","127.0.0.2:9200"]`
    `["http://127.0.0.1"]`
    `["https://127.0.0.1:9200"]`
    `["https://127.0.0.1:9200/subpath"]` (If using a proxy on a subpath)

Host entry protocols decide enabling the SSL if <<plugins-{type}s-{plugin}-ssl_enabled>> is not specified. Set HTTPS to each entry when using SSL or HTTP when not using.
Not specifying entry protocols (example `"127.0.0.1"`) will cause normalizing the host protocols based on <<plugins-{type}s-{plugin}-ssl_enabled>> value, HTTP if `ssl_enabled => false`, HTTPS otherwise.

The plugin uses default 9200 port if port is not specified.
Each host entry must contain same path when using a path, defaults to `/`.

Any special characters present in the URLs here MUST be URL escaped! This means
`#` should be put in as `%23` for instance.

[id="plugins-{type}s-{plugin}-ssl_certificate"]
===== `ssl_certificate`

* Value type is <<path,path>>
* There is no default value for this setting.
* When present, <<plugins-{type}s-{plugin}-ssl_key>> and <<plugins-{type}s-{plugin}-ssl_key_passphrase>> are also required.

Path to a PEM-encoded certificate or certificate chain with which to identify this plugin to Elasticsearch.

[id="plugins-{type}s-{plugin}-ssl_certificate_authorities"]
===== `ssl_certificate_authorities`

* Value type is a list of <<path,path>>s
* There is no default value for this setting.

One or more PEM-formatted files defining certificate authorities.

This setting can be used to _override_ the system trust store for verifying the SSL certificate presented by Elasticsearch.

[id="plugins-{type}s-{plugin}-ssl_enabled"]
===== `ssl_enabled`

* Value type is <<boolean,boolean>>
* There is no default value for this setting.

Secure SSL communication to {es} is enabled unless:

* it is explicitly disabled with `ssl_enabled => false`; OR
* it is implicitly disabled by providing `http`-protocol <<plugins-{type}s-{plugin}-hosts>>.

Specifying `ssl_enabled => true` can be a helpful redundant safeguard to ensure this plugin cannot be configured to use non-ssl communication.

[id="plugins-{type}s-{plugin}-ssl_key"]
===== `ssl_key`

* Value type is <<path,path>>
* There is no default value for this setting.
* Required when connection identity is configured with <<plugins-{type}s-{plugin}-ssl_certificate>>

A path to a PKCS8-formatted SSL certificate key.

[id="plugins-{type}s-{plugin}-ssl_keystore_password"]
===== `ssl_keystore_password`

* Value type is <<password,password>>
* There is no default value for this setting.
* Required when connection identity is configured with <<plugins-{type}s-{plugin}-ssl_keystore_path>>

Password for the <<plugins-{type}s-{plugin}-ssl_keystore_path>>

[id="plugins-{type}s-{plugin}-ssl_keystore_path"]
===== `ssl_keystore_path`

* Value type is <<path,path>>
* There is no default value for this setting.
* When present, <<plugins-{type}s-{plugin}-ssl_keystore_password>> is also required.

A path to a JKS- or PKCS12-formatted keystore with which to identify this plugin to Elasticsearch.

[id="plugins-{type}s-{plugin}-ssl_key_passphrase"]
===== `ssl_key_passphrase`

* Value type is <<password,password>>
* There is no default value for this setting.
* Required when connection identity is configured with <<plugins-{type}s-{plugin}-ssl_certificate>>

A password or passphrase of the <<plugins-{type}s-{plugin}-ssl_key>>.

[id="plugins-{type}s-{plugin}-ssl_truststore_path"]
===== `ssl_truststore_path`

* Value type is <<path,path>>
* There is no default value for this setting.
* When present, <<plugins-{type}s-{plugin}-ssl_truststore_password>> is required.

A path to JKS- or PKCS12-formatted keystore where trusted certificates are located.

This setting can be used to _override_ the system trust store for verifying the SSL certificate presented by Elasticsearch.

[id="plugins-{type}s-{plugin}-ssl_truststore_password"]
===== `ssl_truststore_password`

* Value type is <<password,password>>
* There is no default value for this setting.
* Required when connection trust is configured with <<plugins-{type}s-{plugin}-ssl_truststore_path>>

Password for the <<plugins-{type}s-{plugin}-ssl_truststore_path>>.

[id="plugins-{type}s-{plugin}-ssl_verification_mode"]
===== `ssl_verification_mode`

* Value type is <<array,array>>
* There is no default value for this setting.

Level of verification of the certificate provided by Elasticsearch.
If not specified and SSL is enabled, the verification mode becomes `full`. Refer to <<plugins-{type}s-{plugin}-ssl_enabled>> to get more information about when SSL can be enabled.

* Available modes:
** `none`: performs no validation, implicitly trusting any server that this plugin connects to (insecure)
** `certificate`: validates the server-provided certificate is signed by a trusted certificate authority and that the server can prove possession of its associated private key (less secure)
** `full`: performs the same validations as `certificate` and also that the provided certificate has an identity claim matching the server we are attempting to connect to (most secure)


Also see <<plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
{type} plugins.

[id="plugins-{type}s-{plugin}-geoip_database_directory"]
===== `geoip_database_directory`

* Value type is <<path,path>>
* There is no default value for this setting.

When using the GeoIp processor, this plugin does _not_ have access to the GeoIp databases that are a part of the Elasticsearch cluster and must be configured with locally-available database files.

Databases are registered by file name, and most integrations rely on databases being present named:

 * `GeoLite2-ASN.mmdb`
 * `GeoLite2-City.mmdb`
 * `GeoLite2-Country.mmdb`

This plugin will discover any regular file with the `.mmdb` suffix in the provided directory, and expects the files it finds to be in the MaxMind DB format.

&nbsp;

[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]
